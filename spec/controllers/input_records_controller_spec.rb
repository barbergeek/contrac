require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe InputRecordsController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    login_user @user
  end

  def mock_input_record(stubs={})
    @mock_input_record ||= mock_model(InputRecord, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all input_records as @input_records" do
      InputRecord.stub(:all) { [mock_input_record] }
      get :index
      assigns(:input_records).should eq([mock_input_record])
    end
  end

  describe "GET show" do
    it "assigns the requested input_record as @input_record" do
      InputRecord.stub(:find).with("37") { mock_input_record }
      get :show, :id => "37"
      assigns(:input_record).should be(mock_input_record)
    end
  end

  describe "GET edit" do
    it "assigns the requested input_record as @input_record" do
      InputRecord.stub(:find).with("37") { mock_input_record }
      get :edit, :id => "37"
      assigns(:input_record).should be(mock_input_record)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested input_record" do
        InputRecord.stub(:find).with("37") { mock_input_record }
        mock_input_record.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :input_record => {'these' => 'params'}
      end

      it "assigns the requested input_record as @input_record" do
        InputRecord.stub(:find) { mock_input_record(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:input_record).should be(mock_input_record)
      end

      it "redirects to the input_record" do
        InputRecord.stub(:find) { mock_input_record(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(input_record_url(mock_input_record))
      end
    end

    describe "with invalid params" do
      it "assigns the input_record as @input_record" do
        InputRecord.stub(:find) { mock_input_record(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:input_record).should be(mock_input_record)
      end

      it "re-renders the 'edit' template" do
        InputRecord.stub(:find) { mock_input_record(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested input_record" do
      InputRecord.stub(:find).with("37") { mock_input_record }
      mock_input_record.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the input_records list" do
      InputRecord.stub(:find) { mock_input_record }
      delete :destroy, :id => "1"
      response.should redirect_to(input_records_url)
    end
  end

end
